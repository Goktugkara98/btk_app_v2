TODO â€” Quiz Educational Refactor
Updated: 2025-08-07 22:47:53 (+03:00)

Goal
Make the quiz_educational screen fully client-driven: load all quiz/session/question data once at page load, keep it in StateManager, perform all correctness checks and AI chat context locally, and only use the backend for persistence (answers/timer/complete).

Immediate Next Steps
- [ ] UIManager: Surface metadata in UI (grade, subject, unit, topic, difficulty) from StateManager; remove any backend fetches for labels/badges.
- [ ] AIChat: Ensure AIChatManager/AIChatService build context exclusively from StateManager (current question, options, explanation, metadata). No DB lookups for question data.
- [ ] Navigation: Audit and minimize updateSessionStatus calls during navigation; keep only timer sync if needed (or throttle to reduce load).
- [ ] Verify: After initial load, no further question data fetches occur. All checks are local.

Frontend Refactor Checklist
- [x] ApiService.getSessionInfo(sessionId) added for metadata/timer flags.
- [x] StateManager extended with quiz metadata and derived maps (questionById, optionsByQuestionId, correctOptionByQuestionId).
- [x] QuizEngine now fetches questions + session info in parallel, sets metadata, builds maps, and uses local maps for correctness.
- [ ] UIManager reads StateManager metadata to populate navbar/breadcrumbs and chips.
- [ ] Ensure all UI flows (answer submit/remove, next/prev, goTo) do not re-fetch data.
- [ ] Add defensive UI states for loading/errors already in StateManager (confirm consistent usage).

AI Chat Checklist
- [ ] Confirm AIChatManager uses StateManager for: question text, options (A/B/C/D), correct answer (only for educational feedback), explanation, and session metadata.
- [ ] Ensure AIChatService does not request question data from backend; only send messages/receive responses.
- [ ] Add safe guards to avoid leaking correct answer unless the user has answered or is in educational flow where feedback is intended.

Backend/Endpoints
- [ ] No change required to routes, but validate responses for: GET /api/quiz/session/{id}, GET /questions, POST /answer, PUT /timer, POST /complete.
- [ ] Ensure CORS/cookies are OK (credentials: 'same-origin' used).

Testing Plan
- [ ] Start educational quiz and watch Network tab: only initial GET questions + GET session info + periodic PUT timer + POST answers + POST complete.
- [ ] Submit correct and incorrect answers; verify local correctness check triggers immediately; UI feedback without extra fetch.
- [ ] Navigate across questions: confirm no extra GETs for question content.
- [ ] Timer: verify local countdown and 10s throttled PUT updates; auto-complete when zero.
- [ ] Edge cases: missing options, multiple correct flags forms, null answer removal, reload mid-quiz (state rehydrated from initial fetches).

Performance & Telemetry
- [ ] Throttle updateSessionStatus (timer sync) if still used; consider background-only or on visibility change.
- [ ] Add lightweight debug logs behind a DEBUG flag for production noise control.

Documentation
- [ ] Update README or docs/quiz_educational.md with new architecture: data ownership in StateManager, event flows, API contracts.
- [ ] Add a short developer guide for adding question fields and how to include them in StateManager maps.

Nice-to-have (Post-MVP)
- [ ] Persist answers in localStorage as a safety net (restore after accidental refresh until server confirms).
- [ ] Add offline-friendly queue for answer submissions with retry.
- [ ] Unit tests for StateManager derived maps and QuizEngine.checkAnswerLocally.
- [ ] Visual indicator when backend persistence fails and a retry banner.
